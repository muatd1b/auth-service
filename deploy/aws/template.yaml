AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: auth-service

Globals:
  Function:
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
    Timeout: 28
    MemorySize: 512
Mappings:
  Settings:
    development:
      CorsOrigins:
        - http://localhost
        - https://development.hostname
      AuthSecretsManagerArn: "<secret arn>"
      LambdaAuthorizerSecretsManagerArn: "<secret arn>"
      AppBaseUrl: https://development.hostname
    production:
      CorsOrigins:
        - https://hostname
      AuthSecretsManagerArn: "<secret arn>"
      LambdaAuthorizerSecretsManagerArn: "<secret arn>"
      AppBaseUrl: https://hostname
      ProvisionedConcurrency: 1
Parameters:
  Environment:
    Type: String
    AllowedValues:
      - development
      - staging
      - production
    Default: development
Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: $default
      Auth:
        DefaultAuthorizer: LambdaAuthorizer
        Authorizers:
          LambdaAuthorizer:
            AuthorizerPayloadFormatVersion: 2.0
            EnableSimpleResponses: true
            FunctionArn: !GetAtt LambdaAuthorizer.Arn
            Identity: 
              Headers:
                - Authorization
              ReauthorizeEvery: 0

      CorsConfiguration:
        AllowCredentials: true
        AllowHeaders:
          - Accept
          - Authorization
        ExposeHeaders:
          - Authorization
        AllowMethods:
          - "*"
        AllowOrigins:
          - http://localhost
          - https://development.hostname
          
  LambdaAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      CodeUri: lambda-authorizer
      Handler: main.lambda_handler
      Runtime: python3.9
      # Environment:
      #   Variables:
      #     APP_FUNCTION_ARN: arn:aws:lambda:eu-central-1:123456789:function:auth-development-AppFunction
      #     APP_BASE_URL: !FindInMap [ Settings, !Ref Environment, AppBaseUrl ]
      #     AWS_LAMBDA_AUTHORIZER_SECRETS_MANAGER_ARN: arn:aws:secretsmanager:eu-central-1:123456789:secret:lambdaAuthorizer-development
      # Policies:
      #   - LambdaInvokePolicy:
      #       FunctionName: !GetAtt AppFunction.Arn
      #   - AWSSecretsManagerGetSecretValuePolicy:
      #       SecretArn: arn:aws:secretsmanager:eu-central-1:123456789:secret:lambdaAuthorizer-development
      Environment:
        Variables:
          APP_FUNCTION_ARN: !GetAtt AppFunction.Arn
          APP_BASE_URL: !FindInMap [ Settings, !Ref Environment, AppBaseUrl ]
          AWS_JWT_AUTH_SECRETS_MANAGER_ARN: !Join [ ":", [ arn:aws:secretsmanager, !Ref AWS::Region, !Ref AWS::AccountId, !FindInMap [ Settings, !Ref Environment, JwtAuthSecretsManagerArn ] ] ]
          AWS_LAMBDA_AUTHORIZER_SECRETS_MANAGER_ARN: !Join [ ":", [ arn:aws:secretsmanager, !Ref AWS::Region, !Ref AWS::AccountId, !FindInMap [ Settings, !Ref Environment, LambdaAuthorizerSecretsManagerArn ] ] ]
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Join [ ":", [ arn:aws:secretsmanager, !Ref AWS::Region, !Ref AWS::AccountId, !FindInMap [ Settings, !Ref Environment, JwtAuthSecretsManagerArn ] ] ]
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Join [ ":", [ arn:aws:secretsmanager, !Ref AWS::Region, !Ref AWS::AccountId, !FindInMap [ Settings, !Ref Environment, LambdaAuthorizerSecretsManagerArn ] ] ]
        - LambdaInvokePolicy:
            FunctionName: !Ref AppFunction

  PermissionLambdaAuthorizer:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaAuthorizer
      Principal: apigateway.amazonaws.com
      # SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*"

  AppFunction:
    Type: AWS::Serverless::Function
    Metadata:
      DockerContext: .
      Dockerfile: Dockerfile-lambda
    Properties:
      Architectures:
        - x86_64
      AutoPublishAlias: live
      PackageType: Image
      DeploymentPreference:
        Type: AllAtOnce
      Timeout: 200
      MemorySize: 2048
      Events:
        HttpDelete:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /api/auth/v1/{proxy+}
            Method: DELETE
        HttpGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /api/auth/v1/{proxy+}
            Method: GET
        HttpPatch:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /api/auth/v1/{proxy+}
            Method: PATCH
        HttpPost:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /api/auth/v1/{proxy+}
            Method: POST
        HttpPut:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /api/auth/v1/{proxy+}
            Method: PUT
        CorsPreflightEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /api/auth/v1/{proxy+}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        BasicRequest:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /api/auth/v1/auth/basic
            Method: POST
            Auth:
              Authorizer: NONE
        GoogleRequest:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /api/auth/v1/auth/google
            Method: GET
            Auth:
              Authorizer: NONE
        TokenRequest:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /api/auth/v1/auth/token
            Method: GET
            Auth:
              Authorizer: NONE
        RefreshTokenRequest:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /api/auth/v1/auth/refresh-token
            Method: POST
            Auth:
              Authorizer: NONE
      Environment:
        Variables:
          AWS_AUTH_SECRETS_MANAGER_ARN: !Join [ ":", [ arn:aws:secretsmanager, !Ref AWS::Region, !Ref AWS::AccountId, !FindInMap [ Settings, !Ref Environment, AuthSecretsManagerArn ] ] ]
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Join [ ":", [ arn:aws:secretsmanager, !Ref AWS::Region, !Ref AWS::AccountId, !FindInMap [ Settings, !Ref Environment, AuthSecretsManagerArn ] ] ]

      # Environment:
      #   Variables:
      #     AWS_AUTH_SECRETS_MANAGER_ARN: arn:aws:secretsmanager:eu-central-1:123456789:secret:AuthSecret-development
      # Policies:
      #   - AWSSecretsManagerGetSecretValuePolicy:
      #       SecretArn: arn:aws:secretsmanager:eu-central-1:123456789:secret:AuthSecret-development

Outputs:
  # ServerlessHttpApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  AppApi:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/"
  AppFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt AppFunction.Arn
  AppFunctionIamRole:
    Description: "Implicit IAM Role created for the function"
    Value: !GetAtt AppFunctionRole.Arn
